'use client';

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { createClient } from '../../../../lib/supabase';
import { 
  ArrowLeft, 
  CheckCircle,
  AlertTriangle,
  Award,
  FileText,
  Printer,
  Loader,
  Clock,
  MessageSquare
} from 'lucide-react';
import { useParams } from 'next/navigation';

interface ElevenLabsAnalysis {
  conversation_id: string;
  analysis_timestamp: string;
  conversation_metadata: {
    duration: number;
    message_count: number;
    start_time: number;
    status: string;
    call_successful: string;
  };
  analysis: {
    overall_score: number;
    key_strengths: string[];
    areas_for_improvement: string[];
    specific_feedback: {
      opening: string;
      product_presentation: string;
      objection_handling: string;
      closing: string;
    };
    recommended_actions: string[];
    conversation_summary: string;
  };
  transcript: any[];
  raw_transcript_text: string;
}

export default function SessionResultsPage() {
  const params = useParams();
  const conversationId = params.id as string;
  const supabase = createClient();

  const [analysisData, setAnalysisData] = useState<ElevenLabsAnalysis | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const handleExportReport = () => {
    if (!analysisData) return;

    const reportContent = `
SALES CONVERSATION ANALYSIS REPORT
Generated: ${new Date().toLocaleString()}
Conversation ID: ${conversationId}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

OVERVIEW
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
Overall Score: ${analysisData.analysis.overall_score}/10
Duration: ${Math.ceil(analysisData.conversation_metadata.duration / 60)} minutes
Messages: ${analysisData.conversation_metadata.message_count}
Status: ${analysisData.conversation_metadata.call_successful}

CONVERSATION SUMMARY
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${analysisData.analysis.conversation_summary}

KEY STRENGTHS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${analysisData.analysis.key_strengths.map((s, i) => `${i + 1}. ${s}`).join('\n')}

AREAS FOR IMPROVEMENT
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${analysisData.analysis.areas_for_improvement.map((a, i) => `${i + 1}. ${a}`).join('\n')}

DETAILED FEEDBACK
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

Opening:
${analysisData.analysis.specific_feedback.opening}

Product Presentation:
${analysisData.analysis.specific_feedback.product_presentation}

Objection Handling:
${analysisData.analysis.specific_feedback.objection_handling}

Closing:
${analysisData.analysis.specific_feedback.closing}

RECOMMENDED ACTIONS
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${analysisData.analysis.recommended_actions.map((a, i) => `${i + 1}. ${a}`).join('\n')}

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
Report generated by Sales AI Trainer
    `.trim();

    // Create downloadable text file
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `sales-analysis-${conversationId}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  useEffect(() => {
    const loadElevenLabsAnalysis = async (retryAttempt = 0) => {
      try {
        setIsLoading(true);
        setError(null);

        console.log('üîç Loading ElevenLabs conversation analysis:', conversationId, 'attempt:', retryAttempt + 1);

        // Check if this is a real ElevenLabs conversation ID
        if (conversationId.startsWith('demo-') || conversationId.startsWith('temp-')) {
          setError('This appears to be a demo conversation. Real analysis requires an ElevenLabs conversation ID.');
          setIsLoading(false);
          return;
        }

        // Try to get existing analysis or trigger new analysis
        setIsAnalyzing(true);

        // Get auth token
        const { data: { session } } = await supabase.auth.getSession();

        const analysisResponse = await fetch(`/api/elevenlabs/conversations/${conversationId}/analyze`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            ...(session?.access_token && { 'Authorization': `Bearer ${session.access_token}` })
          }
        });

        if (analysisResponse.ok) {
          const result = await analysisResponse.json();
          setAnalysisData(result);
          console.log('‚úÖ ElevenLabs analysis loaded successfully');
        } else {
          const errorData = await analysisResponse.json();

          // If transcript not ready and we have retry_after suggestion, retry automatically
          if (errorData.retry_after && retryAttempt < 2) {
            console.log(`‚è≥ Transcript processing... retrying in ${errorData.retry_after} seconds`);
            setTimeout(() => {
              loadElevenLabsAnalysis(retryAttempt + 1);
            }, errorData.retry_after * 1000);
            return; // Don't set error yet, we're retrying
          }

          setError(`Failed to analyze conversation: ${errorData.error || 'Unknown error'}`);
        }

      } catch (error) {
        console.error('‚ùå Error loading ElevenLabs analysis:', error);
        setError('Failed to load conversation analysis. Please try again.');
      } finally {
        if (!error) { // Only clear loading if we're not retrying
          setIsLoading(false);
          setIsAnalyzing(false);
        }
      }
    };

    if (conversationId) {
      loadElevenLabsAnalysis();
    }
  }, [conversationId]);

  if (isLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center max-w-md">
          <Loader className="w-8 h-8 animate-spin mx-auto mb-4 text-blue-500" />
          <h2 className="text-xl font-semibold text-gray-700 mb-2">
            {isAnalyzing ? 'Analyzing Conversation...' : 'Loading Analysis...'}
          </h2>
          <p className="text-gray-500 mb-2">
            {isAnalyzing ? 'Using AI to generate detailed insights' : 'Fetching conversation data from ElevenLabs'}
          </p>
          {isAnalyzing && (
            <p className="text-sm text-gray-400">
              This may take a few moments. The transcript is being processed...
            </p>
          )}
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center max-w-md">
          <AlertTriangle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-700 mb-2">Analysis Error</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          <div className="space-x-4">
            <button
              onClick={() => window.location.reload()}
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
            >
              Try Again
            </button>
            <Link href="/dashboard" className="px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors">
              Back to Dashboard
            </Link>
          </div>
        </div>
      </div>
    );
  }

  if (!analysisData) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <AlertTriangle className="w-12 h-12 text-amber-500 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-700 mb-2">No Analysis Available</h2>
          <p className="text-gray-600 mb-6">Could not load conversation analysis data.</p>
          <Link href="/dashboard" className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors">
            Back to Dashboard
          </Link>
        </div>
      </div>
    );
  }

  const { analysis, conversation_metadata } = analysisData;

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white border-b sticky top-0 z-10">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link href="/dashboard" className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                <ArrowLeft className="w-5 h-5 text-gray-600" />
              </Link>
              <div>
                <h1 className="text-xl font-semibold text-gray-900">Conversation Analysis</h1>
                <p className="text-sm text-gray-500">
                  ElevenLabs Conversation ‚Ä¢ {new Date(conversation_metadata.start_time * 1000).toLocaleDateString()}
                </p>
              </div>
            </div>
            <button
              onClick={handleExportReport}
              className="flex items-center space-x-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
            >
              <Printer className="w-4 h-4" />
              <span>Export Report</span>
            </button>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Overview Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="bg-white p-6 rounded-lg shadow-sm border"
          >
            <div className="flex items-center space-x-3 mb-2">
              <Award className="w-5 h-5 text-green-500" />
              <h3 className="font-semibold text-gray-900">Overall Score</h3>
            </div>
            <p className="text-3xl font-bold text-green-500">{analysis.overall_score}/10</p>
            <p className="text-sm text-gray-500 mt-1">AI-powered evaluation</p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className="bg-white p-6 rounded-lg shadow-sm border"
          >
            <div className="flex items-center space-x-3 mb-2">
              <Clock className="w-5 h-5 text-blue-500" />
              <h3 className="font-semibold text-gray-900">Duration</h3>
            </div>
            <p className="text-3xl font-bold text-blue-500">{Math.ceil(conversation_metadata.duration / 60)}m</p>
            <p className="text-sm text-gray-500 mt-1">{conversation_metadata.duration} seconds total</p>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="bg-white p-6 rounded-lg shadow-sm border"
          >
            <div className="flex items-center space-x-3 mb-2">
              <MessageSquare className="w-5 h-5 text-purple-500" />
              <h3 className="font-semibold text-gray-900">Messages</h3>
            </div>
            <p className="text-3xl font-bold text-purple-500">{conversation_metadata.message_count}</p>
            <p className="text-sm text-gray-500 mt-1">
              Status: {conversation_metadata.call_successful === 'success' ? '‚úÖ Successful' : '‚ö†Ô∏è Needs Review'}
            </p>
          </motion.div>
        </div>

        {/* Conversation Summary */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="bg-white p-6 rounded-lg shadow-sm border mb-8"
        >
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Conversation Summary</h2>
          <p className="text-gray-700 leading-relaxed">{analysis.conversation_summary}</p>
        </motion.div>

        {/* Key Strengths & Areas for Improvement */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.4 }}
            className="bg-white p-6 rounded-lg shadow-sm border"
          >
            <div className="flex items-center space-x-3 mb-4">
              <CheckCircle className="w-5 h-5 text-green-500" />
              <h2 className="text-lg font-semibold text-gray-900">Key Strengths</h2>
            </div>
            <ul className="space-y-2">
              {analysis.key_strengths.map((strength, index) => (
                <li key={index} className="flex items-start space-x-2">
                  <span className="w-1.5 h-1.5 bg-green-500 rounded-full mt-2 flex-shrink-0"></span>
                  <span className="text-gray-700">{strength}</span>
                </li>
              ))}
            </ul>
          </motion.div>

          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.5 }}
            className="bg-white p-6 rounded-lg shadow-sm border"
          >
            <div className="flex items-center space-x-3 mb-4">
              <AlertTriangle className="w-5 h-5 text-amber-500" />
              <h2 className="text-lg font-semibold text-gray-900">Areas for Improvement</h2>
            </div>
            <ul className="space-y-2">
              {analysis.areas_for_improvement.map((area, index) => (
                <li key={index} className="flex items-start space-x-2">
                  <span className="w-1.5 h-1.5 bg-amber-500 rounded-full mt-2 flex-shrink-0"></span>
                  <span className="text-gray-700">{area}</span>
                </li>
              ))}
            </ul>
          </motion.div>
        </div>

        {/* Specific Feedback Sections */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.6 }}
          className="bg-white p-6 rounded-lg shadow-sm border mb-8"
        >
          <h2 className="text-lg font-semibold text-gray-900 mb-6">Detailed Feedback</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div className="space-y-4">
              <div>
                <h3 className="font-medium text-gray-900 mb-2">Opening</h3>
                <p className="text-gray-700 text-sm">{analysis.specific_feedback.opening}</p>
              </div>
              <div>
                <h3 className="font-medium text-gray-900 mb-2">Product Presentation</h3>
                <p className="text-gray-700 text-sm">{analysis.specific_feedback.product_presentation}</p>
              </div>
            </div>
            <div className="space-y-4">
              <div>
                <h3 className="font-medium text-gray-900 mb-2">Objection Handling</h3>
                <p className="text-gray-700 text-sm">{analysis.specific_feedback.objection_handling}</p>
              </div>
              <div>
                <h3 className="font-medium text-gray-900 mb-2">Closing</h3>
                <p className="text-gray-700 text-sm">{analysis.specific_feedback.closing}</p>
              </div>
            </div>
          </div>
        </motion.div>

        {/* Recommended Actions */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.7 }}
          className="bg-white p-6 rounded-lg shadow-sm border mb-8"
        >
          <div className="flex items-center space-x-3 mb-4">
            <FileText className="w-5 h-5 text-blue-500" />
            <h2 className="text-lg font-semibold text-gray-900">Recommended Actions</h2>
          </div>
          <ul className="space-y-3">
            {analysis.recommended_actions.map((action, index) => (
              <li key={index} className="flex items-start space-x-3">
                <span className="bg-blue-100 text-blue-600 px-2 py-1 rounded-full text-xs font-medium mt-0.5">
                  {index + 1}
                </span>
                <span className="text-gray-700">{action}</span>
              </li>
            ))}
          </ul>
        </motion.div>

        {/* Action Buttons */}
        <div className="flex flex-col sm:flex-row gap-4 justify-center">
          <Link
            href="/session"
            className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors text-center"
          >
            Start New Session
          </Link>
          <Link
            href="/dashboard"
            className="px-6 py-3 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors text-center"
          >
            Back to Dashboard
          </Link>
        </div>
      </div>
    </div>
  );
}
